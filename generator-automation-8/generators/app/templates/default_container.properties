#CommonProperties
container.name=<%= container.name %>
container.key=<%= container.key %>
# this is used for the hostname unless the scripts pass in '--hostname'
container.host=<%= container.host %>
container.port=<%= container.port %>
container.admin.port=<% if (hardening.setHardening) { %><%= hardening.adminPort %><% } else { %><%= container.port %><% } %>
container.admin.user=<%= container.adminUser %>
container.admin.password=<%= container.adminPassword %>
container.passwords.encrypted=<%= container.encryptPassword %>
# Customize the container default listener settings.  This is only conducted if values exist, otherwise defualts are used.
container.listener.minimum=<%= container.listenerMinimum %>
container.listener.maximum=<%= container.listenerMaximum %>
container.listener.idleTimeout=<%= container.listenerIdleTimeout %>
container.secure=<%= container.secure %>
# The certificates that will be used for container identity, if the default ones are not acceptable
container.secure.keystore=<%= container.secureKeystore %>
container.secure.storepass=<%= container.secureStorepass %>
container.secure.alias=<%= container.secureAlias %>
# The trusted certificates that need to be added into this containers cacerts
container.secure.trusted.keystore=<%= container.secureTrustedKeystore %>
container.secure.trusted.storepass=<%= container.secureTrustedStorepass %>

#FeaturesSection
agent.foundation=false
community.manager=<% if (features.containerType === 'PM with CM' || features.containerType === 'PM with CM/Oauth') { %> <%= true %> <% } else { %> <%= false %> <% } %>
community.manager.apis=<% if (features.containerType === 'CM Only' || features.containerType === 'CM/Oauth') { %> <%= true %> <% } else { %> <%= false %> <% } %>
community.manager.default.theme=<% if (features.containerType === 'PM with CM' || features.containerType === 'PM with CM/Oauth' || features.containerType === 'CM only' || features.containerType === 'CM/Oauth') { %> <%= true %> <% } else { %> <%= false %> <% } %>
community.manager.oauth.provider=<% if (features.containerType.indexOf('Oauth') > -1) { %> <%= true %> <% } else { %> <%= false %> <% } %>
community.manager.oauth.provider.agent=<% if (features.containerType === 'ND with API support' || features.containerType === 'ND with Oauth') { %> <%= true %> <% } else { %> <%= false %> <% } %>
community.manager.openid.provider=false
community.manager.scheduled.jobs=<% if (features.containerType.indexOf('PM') > -1 && features.containerType.indexOf('CM') > -1) { %> <%= true %> <% } else { %> <%= false %> <% } %>
community.manager.simple.developer.theme=false
delegate=false
delegate.access.point=false
managed.services=false
network.director=<% if (features.containerType.indexOf('ND') > -1) { %> <%= true %> <% } else { %> <%= false %> <% } %>
oauth.provider=<% if (features.containerType.indexOf('Oauth') > -1) { %> <%= true %> <% } else { %> <%= false %> <% } %>
oauth.provider.agent=<% if (features.containerType === 'ND with Oauth' || features.containerType === 'ND with API support') { %> <%= true %> <% } else { %> <%= false %> <% } %>
ping.support=<% if (features.pingSupport) { %> <%= true %> <% } else { %> <%= false %> <% } %>
policy.manager.console=<% if (features.containerType.indexOf('PM') > -1) { %> <%= true %> <% } else { %> <%= false %> <% } %>
policy.manager.services=<% if (features.containerType.indexOf('PM') > -1) { %> <%= true %> <% } else { %> <%= false %> <% } %>
scheduled.jobs=false
security.services=<% if (features.containerType.indexOf('PM') > -1) { %> <%= true %> <% } else { %> <%= false %> <% } %>
tomcat.agent=false

#PluginSection
api.security.policy.handler=<% if (features.containerType === 'ND with Oauth' || features.containerType === 'ND with API support') { %> <%= true %> <% } else { %> <%= false %> <% } %>
cluster.support=false
community.manager.plugin=<% if (features.containerType === 'PM with remote CM') { %> <%= true %> <% } else { %> <%= false %> <% } %>
community.manager.policy.console=<% if (features.containerType === 'PM with remote CM') { %> <%= true %> <% } else { %> <%= false %> <% } %>
external.keystore.feature=false
kerberos.implementation=false
community.manager.laas=<% if (features.laas) { %> <%= true %> <% } else { %> <%= false %> <% } %>
ping.federate.integration=<% if (features.pingFederate) { %> <%= true %> <% } else { %> <%= false %> <% } %>

#ToolSection
72.upgrade=false
admin.monitoring.tool=<% if (features.monitoring) { %> <%= true %> <% } else { %> <%= false %> <% } %>

#OptionPacks
# include if siteminder is required
sitemider=<% if (features.siteMinder) { %> <%= true %> <% } else { %> <%= false %> <% } %>
siteminder.ui=<% if (features.siteMinder) { %> <%= true %> <% } else { %> <%= false %> <% } %>
site.minder.path=<%= features.siteMinderPath %>
# include is configuring SAML authentication
saml2.sso=<% if (features.samlWebSSO) { %> <%= true %> <% } else { %> <%= false %> <% } %>
saml2.sso.ui=<% if (features.samlWebSSO) { %> <%= true %> <% } else { %> <%= false %> <% } %>
# include for Development Services
devservices=<% if (features.containerType === 'PM with CM' || features.containerType === 'PM with CM/Oauth' || features.containerType === 'PM with remote CM' || features.containerType === 'CM only' || features.containerType === 'CM/Oauth') { %> <%= true %> <% } else { %> <%= false %> <% } %>
# PMDP Features
pm.custom.policy=false
pm.websphere.mq=false
pmdp=false
pmdp.slave.node=false
pmdp.console.policy=false
pmdp.malicious.pattern=false
pmdp.oauth=false
pmdp.schema.update=false

#ConfigurationFiles
database.configure=<%= features.configureDatabase %>
proxy.filename=<%= configFiles.proxyFileName %>
# used to route containers through load balancer when needed
# Format needs to be the following '<routes><route><filename>com.soa.http.route-pm1.cfg</filename><pattern>http://pm.host.com:9900/*</pattern><url>http://lb.host.com</url></route></routes>'
# Needed when routing requests back through a load balance: https://support.soa.com/support/index.php?_m=knowledgebase&_a=viewarticle&kbarticleid=607
route.definitions=<%= routeDefinition %>

# ND specific properties
# just the address to pm like http://<hostname>:<port>
wsmex.address=<%= features.msmexAddress %>
# if the PM admin console is running on a different port, than wsmex please provide the address to the PM admin console.  'http://<hostname>:<port>
pm.admin.console=<%= features.pmAdminConsole %>
# if the PM admin access is different from this container, set the proper values here
pm.admin.user=<%= features.pmAdminUser %>
pm.admin.password=<%= features.pmAdminPassword %>
# If Basic Auth has been disabled for the configjob, set configjob.secured to false
configjob.secured=<%= features.configjobSecured %>
# all required listeners to be created for nd.  This is a comma seperated field that consistes of at least 1 entries 'listener_name:hostname:port:protocol:idleTimeout:poolMax:poolMin:bind:alias'.
# if ND is secured, automation needs to add an endpoint to the listener.  The automation will use the 'container.secure.keystore' to search from the proper certificate for each listener
nd.listener=<%= ndListener %>
# org needs to be a valid uddi key (Change if container needs to be in a different organization)
# Change if ND is required to be under a different organization
org=<%= features.registrationOrg %>
# Name of the cluster to add the ND container into
cluster=<%= features.clusterName %>
# all required listeners to be created for the cluster, if the cluster doesn't exist.  This is a comma seperated field that consistes of at least 1 entries 'listener_name:hostname:port:protocol:idleTimeout:poolMax:poolMin:bind'
cluster.listener=<%= clusterListener %>
# disable the remote usage writer in ND containers
remote.writer.enabled=<%= configFiles.enableRemoteDatabaseWriter %>

#TenantProperties
# CM specific properties
atmosphere.context.root=<%= tenant.atmosphereContextRoot %>
# users configured in community manager
atmosphere.config.userRolesDenied=<%= tenant.atmosphereConfigUserRolesDenied %>
tenant.url=<%= tenant.url %>
tenant.name=<%= tenant.tenantName %>
tenant.id=<%= tenant.id %>
tenant.address=<%= tenant.address %>
tenant.console.address=<%= tenant.consoleAddress %>
tenant.theme=<%= tenant.theme %>
tenant.admin.email=<%= tenant.adminEmail %>
tenant.admin.password=<%= tenant.tenantAdminPassword %>
tenant.contact.email.address=<%= tenant.contactEmailAddress %>
tenant.from.email.address=<%= tenant.fromEmailAddress %>
tenant.virtual.hosts=<%= tenant.virtualHosts %>
# Added 7.2.8
tenant.create=<% if (features.containerType.indexOf('CM') > -1 && features.containerType.indexOf('remote') < 0) { %> <%= tenant.createTenant %> <% } else { %> <%=false %> <% } %>

#HardeningProperties
# Hardening properties are set to recommended values.  Change if desired.  For details review: http://docs.akana.com/sp/platform-hardening.html
container.harden=<%= hardening.setHardening %>
harden.ignoreCookies=<%= hardening.ignoreCookies %>
harden.secureCookies=<%= hardening.secureCookies %>
harden.cipherSuites=<%= hardening.cipherSuites %>
harden.cache.expirationPeriod=<%= hardening.cacheExpirationPeriod %>
harden.cache.refreshTime=<%= hardening.cacheRefreshTime %>
# only configured on ND containers
harden.nd.interceptor.blocked=<%= hardening.ndInterceptorBlocked %>
harden.nd.template=<%= hardening.ndTemplate %>
# only configured on CM Containers
harden.cm.interceptor.blocked=<%= hardening.cmInterceptorBlocked %>
harden.cm.template=<%= hardening.cmTemplate %>
# Added 7.2.8 (Hardening 2.0)
harden.enabledProtocols=<%= hardening.enabledProtocols %>
harden.nd.replace.host=<%= hardening.ndReplaceHost %>
harden.nd.security.expiration.period=<%= hardening.ndSecurityExpirationPeriod %>
harden.nd.security.refresh.time=<%= hardening.ndSecurityRefreshTime %>
harden.cm.allowed.hosts==<%= hardening.cmAllowedHosts %>
harden.cm.csrf.enabled=<%= hardening.cmCsrfEnabled %>
harden.cm.exception.urls=<%= hardening.cmExceptionUrls %>
harden.cm.keywords=<%= hardening.cmKeywords %>
harden.cm.validate=<%= hardening.cmValidate %>
harden.cm.x.frame=<%= hardening.cmXFrame %>

#PerformanceProperties
# Performance properties need to be set appropriately for your desired results.  Values currently set are for examples only.
#    For details review: http://docs.akana.com/sp/performance-tuning.html
container.performance=<%= performance.setPerformance %>
performance.connection.maxTotal=<%= performance.performanceConnectionMaxTotal %>
performance.connection.defaultMaxPerRoute=<%= performance.performanceConnectionDefaultMaxPerRoute %>
performance.loadGifMetrics=<%= performance.performanceLoadGifMetrics %>
performance.performAutoSearch=<%= performance.performancePerformAutoSearch %>
performance.requireMetricsPolicy=<%= performance.performanceRequireMetricsPolicy %>
performance.failureDataCaptureEnabled=<%= performance.performanceFailureDataCaptureEnabled %>
# ND containers to controll the usage writer
performance.queueCapacity=<%= performance.performanceQueueCapacity %>
performance.usageBatchSize=<%= performance.performanceUsageBatchSize %>
performance.writeInterval=<%= performance.performanceWriteInterval %>
performance.preloadInvokedServices=<%= performance.performancePreloadInvokedServices %>
performance.framework.idleExpiration=<%= performance.performanceFrameworkIdleExpiration %>
performance.framework.makeFreshInterval=<%= performance.performanceFrameworkMakeFreshInterval %>
performance.endpoint.allowRemoval=<%= performance.performanceEndpointAllowRemoval %>
performance.endpoint.expirationInterval=<%= performance.performanceEndpointExpirationInterval %>
performance.endpoint.maxrefreshInterval=<%= performance.performanceEndpointMaxrefreshInterval %>
